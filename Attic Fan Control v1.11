blueprint:
  name: Attic Fan Control
  description: >
    Attic Fan Control v2.11 – Run an attic fan based on the difference between the attic and outside temperatures.
    The fan turns on when the attic temperature is above a target temperature and the temperature delta
    (attic - outside) exceeds a user-set threshold, and turns off once the attic cools to or below the target.
    Additionally, if the fan is running when the stop time is reached, it is automatically turned off.
    This automation respects a cooldown period and can be manually overridden.
  domain: automation
  input:
    attic_sensor:
      name: Attic Temperature Sensor
      description: The sensor that measures the attic temperature.
      selector:
        entity:
          domain: sensor
    outside_sensor:
      name: Outside Temperature Sensor
      description: The sensor that measures the outside temperature.
      selector:
        entity:
          domain: sensor
    fan_switch:
      name: Attic Fan Switch
      description: The switch that controls the attic fan.
      selector:
        entity:
          domain: switch
    delta_threshold:
      name: Temperature Delta Threshold
      description: "The minimum difference (°F) between attic and outside required to run the fan."
      default: 5
      selector:
        number:
          min: 0
          max: 50
          unit_of_measurement: "°F"
    target_temp:
      name: Target Attic Temperature
      description: >
        The attic temperature threshold. The fan turns on only if the attic is above this value and the
        delta condition is met. The fan turns off once the attic cools to or below this temperature.
      default: 60
      selector:
        number:
          min: 0
          max: 150
          unit_of_measurement: "°F"
    start_time:
      name: Start Time
      description: "Time of day after which the sensor-triggered automation is active."
      default: "07:00:00"
      selector:
        time: {}
    stop_time:
      name: Stop Time
      description: "Time of day before which the sensor-triggered automation is active; at or after stop time, the fan is turned off."
      default: "20:00:00"
      selector:
        time: {}
    cooldown_minutes:
      name: Cooldown Period (minutes)
      description: "The period (in minutes) after a fan state change during which the automation won't run again."
      default: 30
      selector:
        number:
          min: 0
          max: 120
          unit_of_measurement: "minutes"
    override:
      name: Override Control
      description: "When enabled, sensor triggers are ignored (manual control)."
      default: false
      selector:
        boolean: {}

variables:
  cd: !input cooldown_minutes
  fs: !input fan_switch
  dt: !input delta_threshold

trigger:
  # Trigger on temperature sensor changes
  - platform: state
    entity_id:
      - !input attic_sensor
      - !input outside_sensor
    id: sensor_trigger
  # Trigger exactly at stop time
  - platform: time
    at: !input stop_time
    id: stop_trigger

condition: []
# (Global conditions removed so that the stop trigger always fires.)

action:
  - choose:
      # Branch 1: stop trigger – always turn off the fan if it’s on.
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'stop_trigger' }}"
          - condition: state
            entity_id: !input fan_switch
            state: 'on'
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input fan_switch

      # Branch 2: sensor trigger for turning the fan on.
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'sensor_trigger' }}"
          - condition: time
            after: !input start_time
            before: !input stop_time
          - condition: template
            value_template: "{{ not override }}"
          - condition: template
            value_template: >
              {% set fan_state = states(fs) %}
              {% if not fan_state.last_changed %}
                true
              {% else %}
                {% set last = as_timestamp(fan_state.last_changed) %}
                {{ (as_timestamp(now()) - last) > (cd | int * 60) }}
              {% endif %}
          - condition: numeric_state
            entity_id: !input attic_sensor
            above: !input target_temp
          - condition: template
            value_template: >
              {{ (states(attic_sensor) | float) - (states(outside_sensor) | float) > dt }}
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input fan_switch

      # Branch 3: sensor trigger for turning the fan off when below target.
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'sensor_trigger' }}"
          - condition: time
            after: !input start_time
            before: !input stop_time
          - condition: numeric_state
            entity_id: !input attic_sensor
            below: !input target_temp
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input fan_switch
  - default: []
mode: single
